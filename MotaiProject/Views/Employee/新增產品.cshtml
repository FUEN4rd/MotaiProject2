@model MotaiProject.ViewModels.ProductViewModel

@{
    ViewBag.Title = "新增產品";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>新增產品</h2>


@using (Html.BeginForm("新增產品","Employee",FormMethod.Post,new { enctype ="multipart/form-data"}))
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>ProductViewModel</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group hidden" style="display:none">
        @Html.LabelFor(model => model.ProductId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ProductId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pNumber, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.pNumber, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.pName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pCategory, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.pCategory, Model.Categories, "請選擇分類", new { @class = "form-control", id = "pCategory" })
            @Html.ValidationMessageFor(model => model.pCategory, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pMaterial, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.pMaterial, Model.Materials, "請選擇材質", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.pMaterial, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pSize, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.pSize, Model.Sizes, "請選擇尺寸", new { @class = "form-control", @id = "pSize" })
            @Html.ValidationMessageFor(model => model.pSize, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pLxWxH, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pLxWxH, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.pLxWxH, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pWeight, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pWeight, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.pWeight, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pPrice, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pPrice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.pPrice, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pQty, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pQty, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.pQty, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pImage, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input type="file" id="filefield" name="pImage" multiple accept="image/*" />
        </div>
        <div id="img-container"></div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

    <div>
        @Html.ActionLink("回到首頁", "員工首頁")
    </div>

<script src="~/Scripts/jquery-3.5.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script>
    const filefield = document.querySelector('#filefield');
    const container = document.querySelector('#img-container');


    const onReaderLoaded = function (event) {
        let tpl = `<img class="myimg" src="${event.target.result}" alt="" width="450px">`;
        container.innerHTML += tpl;
    }

    filefield.addEventListener('change', function (event) {

        for (let i = 0; i < filefield.files.length; i++) {
            const reader = new FileReader();
            reader.addEventListener('load', onReaderLoaded);
            reader.readAsDataURL(filefield.files[i]);
        }
    });
</script>