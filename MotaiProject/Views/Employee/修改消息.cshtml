@model MotaiProject.ViewModels.DetailPromotionViewModel

@{
    ViewBag.Title = "修改消息";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>修改消息</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>DetailPromotionViewModel</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


    @*<div class="form-group">
            @Html.LabelFor(model => model.pPromotionPostDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.pPromotionPostDate, new { htmlAttributes = new { @class = "form-control "} })
                @Html.ValidationMessageFor(model => model.pPromotionPostDate, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group">
        @Html.LabelFor(model => model.pCategory, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.pCategory, Model.Categories, "請選擇分類", new { @class = "form-control", id = "pCategory" })
            @Html.ValidationMessageFor(model => model.pCategory, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PromotionDescription, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PromotionDescription, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PromotionDescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pADimage, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pADimage, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.pADimage, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pPromotionWeb, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pPromotionWeb, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.pPromotionWeb, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.PromotionName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PromotionName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PromotionName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pCondition, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pCondition, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.pCondition, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pDiscount, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pDiscount, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.pDiscount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pDiscountCode, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pDiscountCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.pDiscountCode, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pPromotionStartDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pPromotionStartDate, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
            @Html.ValidationMessageFor(model => model.pPromotionStartDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pPromotionDeadline, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.pPromotionDeadline, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
            @Html.ValidationMessageFor(model => model.pPromotionDeadline, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.pADimage, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input type="file" id="filefield" name="pImage" multiple accept="image/*" />
        </div>
        <div id="img-container" name="pImage"></div>
    </div>

    <div style="display:none">
        @Html.EditorFor(model => model.PromotionId, new { htmlAttributes = new { @class = "form-control" } })
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("全部消息", "員工看消息")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script>
    const filefield = document.querySelector('#filefield');
    const container = document.querySelector('#img-container');
    $(document).ready(function () {
        fetch('@Url.Action("修改消息讀圖", "Employee")', {
            method: 'POST',
            headers: {
                "Content-type": "application/x-www-form-urlencoded; charset=UTF-8"
            },
            body: `ProductId=${@Model.ProductId}`
        }).then(function (response) {
            return response.json();
        }).then(function (data) {
            for (let i = 0; i < data.images.length; i++) {
                onReader(data.images[i]);
            }
        });
    });
    const onReader = function (event) {
        let tpl = `<img class="myimg" src="${event}" alt="" width="450px">`;
        container.innerHTML += tpl;
    }
    const onReaderLoaded = function (event) {
        let tpl = `<img class="myimg" src="${event.target.result}" alt="" width="450px">`;
        container.innerHTML += tpl;
    }

    filefield.addEventListener('change', function (event) {
        container.innerHTML = "";
        console.log(filefield.files);
        for (let i = 0; i < filefield.files.length; i++) {
            const reader = new FileReader();
            reader.addEventListener('load', onReaderLoaded);
            reader.readAsDataURL(filefield.files[i]);
        }
    });
</script>